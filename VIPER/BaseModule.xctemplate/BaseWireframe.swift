//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Stephan Yannick @YannickSteph
//

import UIKit

//MARK: - BaseWireframeProtocol

protocol BaseWireframeProtocol: class {
    
    associatedtype T: UIViewController
    associatedtype U
    
    var viewController: T? { get set }
    static func createModule(with parameters: U) -> T
    static func createModule() -> T
}

//MARK: - BaseWireframeProtocol extensions

extension BaseWireframeProtocol {
    
    static func createModule(with parameters: Any) -> T {
        fatalError("Implementation pending...")
    }
    static func createModule() -> T {
        fatalError("Implementation pending...")
    }
}

//MARK: - BaseWireframeProtocol extensions

extension BaseWireframeProtocol {
    
    var appDelegate: AppDelegate? {
        return UIApplication.shared.delegate as? AppDelegate
    }
    
    var window: UIWindow? {
        return appDelegate?.window
    }
    
    var rootViewController: UIViewController? {
        return window?.rootViewController
    }
    
    var navigationController: UINavigationController? {
        return viewController?.navigationController
    }
    
    func setRoot(_ viewController: UIViewController) {
        window?.rootViewController = viewController
    }
    
    func present(_ viewController: UIViewController, animated: Bool = true) {
        viewController.present(viewController, animated: true, completion: nil)
    }
    
    func push(_ viewController: UIViewController, animated: Bool = true, completion: (()->())? = nil) {
        CATransaction.begin()
        CATransaction.setCompletionBlock(completion)
        navigationController?.pushViewController(viewController, animated: animated)
        CATransaction.commit()
    }
    
    
    func dismiss(animated: Bool = true, completion: (() -> ())? = nil) {
        navigationController?.dismiss(animated: animated, completion: completion)
    }
    
    func pop(animated: Bool) {
        let _ = navigationController?.popViewController(animated: animated)
    }
    
    func pop(_ animated: Bool = true, completion: (()->())? = nil) {
        CATransaction.begin()
        CATransaction.setCompletionBlock(completion)
        navigationController?.popViewController(animated: animated)
        CATransaction.commit()
    }
    
    func popToRoot(_ animated: Bool = true, completion: (()->())? = nil) {
        CATransaction.begin()
        CATransaction.setCompletionBlock(completion)
        self.viewController?.navigationController?.popToRootViewController(animated: animated)
        CATransaction.commit()
    }
}
